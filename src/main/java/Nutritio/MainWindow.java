package Nutritio;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

public class MainWindow extends javax.swing.JFrame {

    private ArrayList<Recipe> recipes;
    private ArrayList<String> ids;

    private ArrayList<SimModel> results;
    private File currentFile;

    public MainWindow() {
        initComponents();
        ingredientInput.setFont(new Font("Serif", Font.PLAIN, 23));
        recipes = new ArrayList();
        ids = new ArrayList();
        results = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        Tabs = new javax.swing.JTabbedPane();
        HomePanel = new javax.swing.JPanel();
        generateRecipes = new javax.swing.JButton();
        ingredientInput = new javax.swing.JTextField();
        RecipeListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recipeTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        generateRecipes.setText("Generate");
        generateRecipes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRecipesActionPerformed(evt);
            }
        });

        ingredientInput.setText("Enter ingredients (separated by commas)");
        ingredientInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomePanelLayout = new javax.swing.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ingredientInput, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateRecipes, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateRecipes, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingredientInput))
                .addContainerGap(220, Short.MAX_VALUE))
        );

        Tabs.addTab("Home", HomePanel);

        recipeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "URL (Click to open link)", "Image"
            }
        ));
        jScrollPane1.setViewportView(recipeTable);

        javax.swing.GroupLayout RecipeListPanelLayout = new javax.swing.GroupLayout(RecipeListPanel);
        RecipeListPanel.setLayout(RecipeListPanelLayout);
        RecipeListPanelLayout.setHorizontalGroup(
            RecipeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
        );
        RecipeListPanelLayout.setVerticalGroup(
            RecipeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        Tabs.addTab("Recipe List", RecipeListPanel);

        jMenu1.setText("File");

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        SaveAs.setText("Save As");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(SaveAs);

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ingredientInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientInputActionPerformed
    }//GEN-LAST:event_ingredientInputActionPerformed

    private void generateRecipesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRecipesActionPerformed

        // prevents results from previous queries from populating the table
        recipes.clear();

        FetchFromAPI http = new FetchFromAPI();

        ArrayList<String> ingredients = getIngredientList();

        String rawData = null;

        // getting raw data from api
        try {
            rawData = http.getRecipeData(ingredients);
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        String[] rawRecipes = rawData.split("title");
        String[] rawIds = rawData.split(",\"title\".*?\\d+.,.\"id\":");

        // compiling id list
        for (int i = 0; i < rawIds.length; i++) {
            if (i == 0) {
                ids.add(rawIds[0].substring(7));
            } else if (i == rawIds.length - 1) {
                ids.add(rawIds[rawIds.length - 1].substring(0, 6));
            } else {
                ids.add(rawIds[i]);
            }
        }

        // parsing raw data and adding to recipes list
        for (int i = 1; i < rawRecipes.length; i++) {
            String recipeName = (rawRecipes[i].split("\",\"")[0]).substring(3);
            String imageURL = rawRecipes[i].split("\",\"")[1].split("\":\"")[1];
            System.out.println(imageURL);
            try {
                recipes.add(new Recipe(ids.get(i - 1), recipeName, http.getURL(ids.get(i - 1)), imageURL));
            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        results.add(new SimModel(recipes,ids));

        displayRecipes();
    }//GEN-LAST:event_generateRecipesActionPerformed

    private void writeModelToFile(File file) {
        try {
            
                FileOutputStream fos = new FileOutputStream(file);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(results);
                currentFile = file;
                oos.close();
                //menuItem_save.se();
            

        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: File not found", "ok beast 2", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: No permission", "ok beast 2", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        
        if (currentFile == null) {
            SaveAsActionPerformed(evt);
        }
        else{
            writeModelToFile(currentFile);   
            //jMenuItem_save.setEnabled(false);
        }
        
        
    }//GEN-LAST:event_saveActionPerformed

    
    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();

        jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));

        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            writeModelToFile(jfc.getSelectedFile()); 
        }
        
        
    }//GEN-LAST:event_SaveAsActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        
        try {
            // TODO add your handling code here:
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                FileInputStream fis  = new FileInputStream(jfc.getSelectedFile());
                ObjectInputStream ois = new ObjectInputStream(fis);
                //jSpinner_viewSim.setValue(1);
                
                results = (ArrayList)ois.readObject();
                
                SimModel model = results.get(0); 

                recipes = model.getRecipes();

                displayRecipes();
            }
   
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: File not found", "ok beast 2", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: File not found", "ok beast 2", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: File not found", "ok beast 2", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openActionPerformed

    private ArrayList<String> getIngredientList() {
        ArrayList<String> ingredientList = new ArrayList();
        String userIngredients = ingredientInput.getText();
        userIngredients = userIngredients.replaceAll("[\\n\\t ]", "");
        Scanner scanner = new Scanner(userIngredients);
        scanner.useDelimiter(",");

        while (scanner.hasNext()) {
            ingredientList.add(scanner.next());
        }

        return ingredientList;
    }

    private void displayRecipes() {
        DefaultTableModel model = (DefaultTableModel) recipeTable.getModel();

        // allows images to be rendered in the image column of the table
        recipeTable.getColumnModel().getColumn(2).setCellRenderer(recipeTable.getDefaultRenderer(ImageIcon.class));

        // makes the rows tall enough to display images
        recipeTable.setRowHeight(300);

        // width of a 1080p screen
        int WIDTH = 1920;

        // setting widths of the columns to scale properly
        recipeTable.getColumnModel().getColumn(0).setMaxWidth(2 * WIDTH / 8);
        recipeTable.getColumnModel().getColumn(1).setMaxWidth(4 * WIDTH / 8);
        recipeTable.getColumnModel().getColumn(2).setMaxWidth(2 * WIDTH / 8);

        // sets header font
        recipeTable.getTableHeader().setFont(new Font("Serif", Font.BOLD, 25));

        // sets table font
        recipeTable.setFont(new Font("Serif", Font.PLAIN, 20));

        // clears the table
        model.setRowCount(0);

        // enables the links from the table to be opened in the users default browser
        recipeTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                // gets row that the user clicked
                int row = recipeTable.getSelectedRow();
                URI uri = null;
                try {
                    uri = new URI(recipes.get(row).getUrl());
                    open(uri);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        // filling recipes table with data
        for (Recipe r : recipes) {
            Object[] data = new Object[3];
            data[0] = r.getName();
            data[1] = r.getUrl();
            ImageIcon temp = null;
            try {
                temp = new ImageIcon(new URL(r.getImageURL()));
            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            data[2] = temp;
            model.addRow(data);
        }

        // switch to recipes tab after the recipes are generated
        Tabs.setSelectedIndex(1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    private static void open(URI uri) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) {
                /* TODO: error handling */ }
        } else {
            /* TODO: error handling */ }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HomePanel;
    private javax.swing.JPanel RecipeListPanel;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton generateRecipes;
    private javax.swing.JTextField ingredientInput;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem open;
    private javax.swing.JTable recipeTable;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
}
