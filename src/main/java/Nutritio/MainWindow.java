package Nutritio;

import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

public class MainWindow extends javax.swing.JFrame {

    private ArrayList<Recipe> recipes;
    private ArrayList<String> ids;

    public MainWindow() {
        initComponents();
        recipes = new ArrayList();
        ids = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tabs = new javax.swing.JTabbedPane();
        HomePanel = new javax.swing.JPanel();
        generateRecipes = new javax.swing.JButton();
        ingredientInput = new javax.swing.JTextField();
        RecipeListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recipeTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        generateRecipes.setText("Generate Recipes");
        generateRecipes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRecipesActionPerformed(evt);
            }
        });

        ingredientInput.setText("Enter ingredients (separated by commas)");
        ingredientInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomePanelLayout = new javax.swing.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ingredientInput, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateRecipes)
                .addContainerGap())
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ingredientInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateRecipes))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        Tabs.addTab("Home", HomePanel);

        recipeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Image"
            }
        ));
        jScrollPane1.setViewportView(recipeTable);

        javax.swing.GroupLayout RecipeListPanelLayout = new javax.swing.GroupLayout(RecipeListPanel);
        RecipeListPanel.setLayout(RecipeListPanelLayout);
        RecipeListPanelLayout.setHorizontalGroup(
            RecipeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
        );
        RecipeListPanelLayout.setVerticalGroup(
            RecipeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        Tabs.addTab("Recipe List", RecipeListPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ingredientInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientInputActionPerformed
    }//GEN-LAST:event_ingredientInputActionPerformed

    private void generateRecipesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRecipesActionPerformed

        // prevents results from previous queries from populating the table
        recipes.clear();

        FetchFromAPI http = new FetchFromAPI();

        ArrayList<String> ingredients = getIngredientList();

        PrintWriter recipePrinter = null;
        PrintWriter rawPrinter = null;
        PrintWriter idPrinter = null;
        String rawData = null;

        // creating PrintWriters
        try {
            rawPrinter = new PrintWriter(new FileWriter(new File("rawData.nut")));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            recipePrinter = new PrintWriter(new FileWriter(new File("recipes.nut")));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            idPrinter = new PrintWriter(new FileWriter(new File("ids.nut")));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        // getting raw data from api
        try {
            rawData = http.getRecipeData(ingredients);
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        String[] rawRecipes = rawData.split("title");
        String[] rawIds = rawData.split(",\"title\".*?\\d+.,.\"id\":");
        
        // compiling id list
        for (int i = 0; i < rawIds.length; i++) {
            if (i == 0) {
                ids.add(rawIds[0].substring(7));
            } else if (i == rawIds.length - 1) {
                ids.add(rawIds[rawIds.length - 1].substring(0, 6));
            } else {
                ids.add(rawIds[i]);
            }
        }
        
        // parsing raw data and adding to recipes list
        for (int i = 1; i < rawRecipes.length; i++) {
            String recipeName = (rawRecipes[i].split("\",\"")[0]).substring(3);
            String imageURL = rawRecipes[i].split("\",\"")[1].split("\":\"")[1];
            recipes.add(new Recipe(ids.get(i-1), recipeName, new ArrayList<Ingredient>(), imageURL));
        }

        System.out.println(recipes);
//        // print out raw data, recipes and ids
//        rawPrinter.print(rawData);
//
//        for (String recipe : rawRecipes) {
//            recipePrinter.print(recipe + "\n\n");
//        }
//        for (String id : rawIds) {
//            idPrinter.print(id + "\n\n");
//        }
//
//        recipePrinter.close();
//        rawPrinter.close();
//        idPrinter.close();

        displayRecipes();
    }//GEN-LAST:event_generateRecipesActionPerformed

    private ArrayList<String> getIngredientList() {
        ArrayList<String> ingredientList = new ArrayList();
        String userIngredients = ingredientInput.getText();
        userIngredients = userIngredients.replaceAll("[\\n\\t ]", "");
        Scanner scanner = new Scanner(userIngredients);
        scanner.useDelimiter(",");

        while (scanner.hasNext()) {
            ingredientList.add(scanner.next());
        }

        return ingredientList;
    }

    private void displayRecipes() {
        DefaultTableModel model = (DefaultTableModel) recipeTable.getModel();

        // allows images to be rendered in second column of the table
        recipeTable.getColumnModel().getColumn(1).setCellRenderer(recipeTable.getDefaultRenderer(ImageIcon.class));

        // makes the rows tall enough to display images
        recipeTable.setRowHeight(200);

        // sets header font
        recipeTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 30));

        // sets table font
        recipeTable.setFont(new Font("Arial", Font.PLAIN, 20));

        // clears the table
        model.setRowCount(0);

        for (Recipe r : recipes) {
            Object[] data = new Object[2];
            data[0] = r.getName();
            Icon temp = null;
            try {
                temp = new ImageIcon(new URL(r.getImageURL()));
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            data[1] = temp;
            model.addRow(data);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HomePanel;
    private javax.swing.JPanel RecipeListPanel;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton generateRecipes;
    private javax.swing.JTextField ingredientInput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable recipeTable;
    // End of variables declaration//GEN-END:variables
}
